using System;

namespace MarkLogicLib {
  public class Connection {

    private Options options = getDefaultOptions();
    private JsonServiceClient restClient = null; // TODO see how this supports Digest, Basic, and HTTPS

	  public Connection () {
	  }

    public static Options getDefaultOptions() {
      Options opts = new Options {
        host = "localhost", port = 9090, adminport = 8002, 
        ssl = false, auth = "digest", username = "admin",password = "admin", 
        database = "mldbtest", 
        searchoptions = null, fastthreads = 10, fastparts = 100
      };
      return opts;
    }



    public Response doGet(String path,QueryParams parameters) {
    }

    public Response doPut(String path,QueryParams parameters,Doc doc) {
    }

    public Response doPost(String path,QueryParams parameters,Doc doc) {
    }

    public Response doDelete(String path,QueryParams parameters) {
    }
    
    /**
     * Function allowing MLDB's underlying REST invocation mechanism to be used for an arbitrary request. 
     * Useful for future proofing should some new functionality come out, or bug discovered that prevents
     * your use of a JavaScript Driver API call.
     * options = {method: "GET|POST|PUT|DELETE", path: "/v1/somepath?key=value&format=json"}
     * content = undefined for GET, DELETE, json for PUT, whatever as required for POST
     */
    public Response doRequest() {
      return null;
    }



		// TODO ENSURE ALL METHODS FROM MLDB ARE SUPPORTED

    // DRIVER CONFIGURATION
    /**
     * Provide configuration information to this database. This is merged with the defaults.
     */
	  public void configure(Options options) {
      this.options = options;

      // TODO refresh session information, if persisted in our classes
      this.restClient = new JsonServiceClient(this.options.getConnectionString());
	  }

	  public void setLogger() {
	  }


    // DATABASE MANAGEMENT
    /**
     * Does this database exist? Returns an object, not boolean, to the callback
     */
	  public bool exists() {
	    // TODO perform check in exists()
	    return false;
	  }

    /**
     * Creates the database and rest server if it does not already exist
     */
		public void create() {
		}
    
    /**
     * Destroys the database and rest api instance
     */
		public void destroy() {
		}

		// DOCUMENT MANAGEMENT
    // NEEDED FOR FILE SYNC PROJECT
    /**
     * Fetches a document with the given URI.
     * 
     * https://docs.marklogic.com/REST/GET/v1/documents
     */
		public Doc get(String uri) {
      Response response = doGet("/v1/documents", new QueryParams {uri = uri});
      // TODO Parse in to Doc as required

		}
    
    /**
     * Fetches the metadata for a document with the given URI. Metadata document returned in result.doc
     * 
     * https://docs.marklogic.com/REST/GET/v1/documents
     */
		public Doc metadata() {
      String path = @"/v1/documents";
      QueryParams qp = new QueryParams {
        category = "metadata"
      };
      Response response = doGet (path, qp);
		}
		
    // NEEDED FOR FILE SYNC PROJECT
    /**
     * Saves new docs with GUID-timestamp, new docs with specified id, or updates doc with specified id
     * NB handle json being an array of multiple docs rather than a single json doc
     * If no docuri is specified, one is generated by using a combination of the time and a large random number.
     *
     * https://docs.marklogic.com/REST/PUT/v1/documents
     */
    public void save(Doc doc,String docuri,Doc properties) {
      String path = @"/v1/documents";
      QueryParams qp = new QueryParams {
        uri = docuri
      };
      doPut (path, qp);
	  }
    
    /**
     * Updates the document with the specified uri by only modifying the passed in properties.
     * NB May not be possible in V6 REST API elegantly - may need to do a full fetch, update, save
     */
		public void merge() {
		}
		
    // NEEDED FOR FILE SYNC PROJECT
    /**
     * Deletes the specified document
     * 
     * https://docs.marklogic.com/REST/DELETE/v1/documents
     */ 
    public void delete(String docuri) {
      String path = @"/v1/documents";
      QueryParams qp = new QueryParams {
        uri = docuri
      };
      doDelete (path, qp);
		}

    // SEARCH FUNCTIONS
    /**
     * Returns all documents in a collection, optionally matching against the specified fields
     * http://docs.marklogic.com/REST/GET/v1/search
     */
		public DocList collect() {
		}
    
    /**
     * Lists all documents in a directory, to the specified depth (default: 1), optionally matching the specified fields
     * http://docs.marklogic.com/REST/GET/v1/search
     */
		public DocList list() {
		}
    
    /**
     * Performs a simple key-value search. Of most use to JSON programmers.
     * 
     * https://docs.marklogic.com/REST/GET/v1/keyvalue
     */
		public void keyvalue() {
		}
    
    /**
     * Performs a search:search via REST
     * http://docs.marklogic.com/REST/GET/v1/search
     *
     * See supported search grammar http://docs.marklogic.com/guide/search-dev/search-api#id_41745 
     */ 
		public void search() {
		}
    
    /**
     * Performs a search:search via REST
     * http://docs.marklogic.com/REST/GET/v1/search
     *
     * See supported search grammar http://docs.marklogic.com/guide/search-dev/search-api#id_41745 
     */ 
		public void searchCollection() {
		}
    
    /**
     * Performs a structured search.
     * http://docs.marklogic.com/REST/GET/v1/search
     * 
     * Uses structured search instead of cts:query style searches. See http://docs.marklogic.com/guide/search-dev/search-api#id_53458
     */
		public void structuredSearch() {
		}
    
    /**
     * Saves search options with the given name. These are referred to by mldb.structuredSearch.
     * http://docs.marklogic.com/REST/PUT/v1/config/query/*
     *
     * For structured serch options see http://docs.marklogic.com/guide/rest-dev/search#id_48838
     */
		public void saveSearchOptions() {
		}

		// NEEDED FOR FILE SYNC PROJECT
		public DocRefs listURIs(String uri) {
      // TODO listURIs
		}
		
		// NEEDED FOR FILE SYNC PROJECT
		public DocRefs listURIsSinceVersion(String uri,String mvccVersion) {
      // TODO listURIsSinceVersion
		}

		// TRANSACTIONS
    // NEEDED FOR FILE SYNC PROJECT
    /**
     * Opens a new transaction. Optionally, specify your own name.
     * http://docs.marklogic.com/REST/POST/v1/transactions
     */
    public void beginTransaction(String txname) {
      String path = @"/v1/transactions";
      QueryParams qp = new QueryParams {
        category = "metadata"
      };
      if (null != txname) {
        qp.name = txname;
      } else {
        qp.name = "client-txn";
      }
      this.txid = qp.name;
      Response response = doPost (path, qp);
		}
		
    // NEEDED FOR FILE SYNC PROJECT
    /**
     * Commits the open transaction
     * http://docs.marklogic.com/REST/POST/v1/transactions/*
     */
    public void commitTransaction() {
      String path = @"/v1/transactions/" + this.txid;
      QueryParams qp = new QueryParams {
        result = "commit"
      };
      doPost (path, qp);
		}
		
    // NEEDED FOR FILE SYNC PROJECT
    /**
     * Rolls back the open transaction.
     * http://docs.marklogic.com/REST/POST/v1/transactions/*
     */
    public void rollbackTransaction() {
      String path = @"/v1/transactions/" + this.txid;
      QueryParams qp = new QueryParams {
        result = "rollback"
      };
      doPost (path, qp);
		}

		// REST API EXTENSIONS

    // UTILITY FUNCTIONS
    
    // POTENTIALLY NEEDED FOR FILE SYNC PROJECT (for saving all docs in a folder (uri) )
    /**
     * Inserts many JSON documents. FAST aware, TRANSACTION aware.
     */
    public void saveAll() {
    }

  }
}

